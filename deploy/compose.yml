# Nombre de archivo: compose.yml
# Ubicación de archivo: deploy/compose.yml
# Descripción: Stack base con PostgreSQL + API FastAPI + healthchecks y volumen persistente
 

name: lasfocas

services:
  postgres:
    image: postgres:16-alpine
    container_name: lasfocas-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432" # Cambiar host-port si está ocupado
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ../db/init.sql:/docker-entrypoint-initdb.d/00-init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB} -h localhost"]
      interval: 5s
      timeout: 5s
      retries: 20
    networks:
      - lasfocas_net

  api:
    build:
      context: ..
      dockerfile: api/Dockerfile
    container_name: lasfocas-api
    restart: unless-stopped
    env_file:
      - ../.env
    environment:
      # Aseguramos que el host de DB sea el nombre del servicio de compose
      POSTGRES_HOST: postgres
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "8001:8000" # 8000 ocupado por otro servicio externo a este stack
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:8000/health || curl -fsS http://192.168.241.28:8001/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 12
    networks:
      - lasfocas_net

  web:
    build:
      context: ..
      dockerfile: web/Dockerfile
    container_name: lasfocas-web
    env_file:
      - ../.env
    environment:
      NLP_INTENT_URL: http://nlp_intent:8100
      # Nota: Se usa un Ollama externo ya existente en la VM/host
      OLLAMA_URL: http://host.docker.internal:11434
      API_BASE: http://192.168.241.28:8080
      # LOG_LEVEL se toma de .env; si se desea sobreescribir aquí se puede definir.
    extra_hosts:
      - "host.docker.internal:host-gateway"
    depends_on:
      - api
      - nlp_intent
      - postgres
    ports:
      - "8080:8080"
    volumes:
      - ../Logs:/app/Logs
      - ../Templates:/app/Templates:ro
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:8080/health || curl -fsS http://192.168.241.28:8080/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 12
    networks:
      - lasfocas_net

  nlp_intent:
    build:
      context: ..
      dockerfile: deploy/docker/nlp_intent.Dockerfile
    env_file:
      - ../.env
    environment:
      # Nota: Se usa un Ollama externo ya existente en la VM/host
      OLLAMA_URL: http://host.docker.internal:11434
    extra_hosts:
      - "host.docker.internal:host-gateway"
    expose:
      - "8100"
    restart: unless-stopped
    networks:
      - lasfocas_net
    healthcheck:
      test: ["CMD-SHELL", "python - <<'PY'\nimport urllib.request\ntry:\n  with urllib.request.urlopen('http://localhost:8100/health', timeout=5) as r:\n    exit(0 if r.status==200 else 1)\nexcept Exception:\n  exit(1)\nPY"]
      interval: 10s
      timeout: 5s
      retries: 12

  bot:
    build:
      context: ..
      dockerfile: deploy/docker/bot.Dockerfile
    env_file:
      - ../.env
    depends_on:
      - api
    restart: unless-stopped
    volumes:
      - bot_data:/app/data

  office:
    build:
      context: ../office_service
      dockerfile: Dockerfile
    container_name: lasfocas-office
    env_file:
      - ../.env
    environment:
      OFFICE_ENABLE_UNO: ${OFFICE_ENABLE_UNO:-true}
      OFFICE_LOG_LEVEL: ${OFFICE_LOG_LEVEL:-INFO}
    expose:
      - "8090"
      - "2002"
    restart: unless-stopped
    networks:
      - lasfocas_net
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:8090/health || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 12

  repetitividad_worker:
    build:
      context: ..
      dockerfile: deploy/docker/repetitividad_worker.Dockerfile
    profiles: ["reports-worker"]
    env_file:
      - ../.env
    environment:
      TEMPLATES_DIR: /app/Templates
    volumes:
      - ../Templates:/app/Templates:ro
      - ../Reports:/app/data/reports
    command: ["python", "-m", "modules.informes_repetitividad.worker"]

  # (Opcional) pgAdmin. Levantar con: docker compose -f deploy/compose.yml --profile pgadmin up -d
  pgadmin:
    image: dpage/pgadmin4:8
    container_name: lasfocas-pgadmin
    profiles: ["pgadmin"]
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@local
      PGADMIN_DEFAULT_PASSWORD: admin
    ports:
      - "5050:80"
    depends_on:
      - postgres
    networks:
      - lasfocas_net

volumes:
  postgres_data:
  bot_data:

networks:
  lasfocas_net:
    driver: bridge
